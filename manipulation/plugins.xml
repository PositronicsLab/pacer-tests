  <XML>
  <plugins type="string vector">
      error-check
      end-effectors
      freeze
      joint-PID-controller-accel
   idyn-controller
    </plugins>
  
  <!--
   OTHER PLUGINS:
      eef-PID-controller
   joint-PID-controller
   idyn-controller
   -->
  
  <!-- =================== PLUGIN DESCRIPTIONS ==================== -->
  <freeze>
    <file type="string">libstay.so</file>
     <real-time-factor type="int">1</real-time-factor>
     <priority type="double">1</priority>
  </freeze>
  <error-check>
    <file type="string">liberror-check.so</file>
    <real-time-factor type="int">1</real-time-factor>
    <priority type="double">0</priority>
  </error-check>
  
  <end-effectors>
    <file type="string">libend-effectors.so</file>
    <real-time-factor type="int">1</real-time-factor>
    <priority type="double">0</priority>
  </end-effectors>
  
  <ik-end-effector>
    <file type="string">libinverse-kinematics.so</file>
    <priority type="double">2</priority>
    <real-time-factor type="int">1</real-time-factor>
    <abs-err-tolerance type="double">1e-4</abs-err-tolerance>
  </ik-end-effector>
  
  <joint-PID-controller>
    <file type="string">libjoint-PID-controller.so</file>
    <priority type="double">4</priority>
    <real-time-factor type="int">1</real-time-factor>
    <acceleration type="bool">false</acceleration>
    <!-- Gains are for the q of joint ids respectively -->
    <gains>
      <kp type="double">2e1 2e1 2e1      2e1 2e1 2e1     2e1 2e1 2e1 2e1 2e1</kp>
      <kv type="double">1e-1 1e-1 1e-1  1e-1 1e-1 1e-1  1e-1 1e-1 1e-1 1e-1 1e-1</kv>
      <ki type="double">0     0     0       0   0   0     0  0 0 0 0 </ki>
    </gains>
  </joint-PID-controller>

<joint-PID-controller-accel>
  <file type="string">libjoint-PID-controller.so</file>
  <priority type="double">3</priority>
  <real-time-factor type="int">1</real-time-factor>
  <acceleration type="bool">true</acceleration>
  <!-- Gains are for the q of joint ids respectively -->
  <gains>
    <kp type="double">5e4 5e4 5e4      5e4 5e4 5e4      5e4 </kp>
    <kv type="double">1e2 1e2 1e2      1e2 1e2 1e2      1e2 </kv>
    <ki type="double">1e-2 1e-2 1e-2   1e-2 1e-2 1e-2   1e-2</ki>
  </gains>
</joint-PID-controller-accel>

  <eef-PID-controller>
    <file type="string">libeef-PID-controller.so</file>
    <priority type="double">4</priority>
    <real-time-factor type="int">1</real-time-factor>
    <id type="string vector">HAND</id>
    <gains>
      <kp type="double">1e3 1e3 1e3</kp>
      <kv type="double">3e1 3e1 3e1</kv>
      <ki type="double">0 0 0      </ki>
    </gains>
  </eef-PID-controller>
  
  <eef-PID-controller-accel>
    <file type="string">libeef-PID-controller.so</file>
    <priority type="double">4</priority>
    <real-time-factor type="int">1</real-time-factor>
    <acceleration type="bool">true</acceleration>
    <id type="string vector">HAND</id>
    <!-- Gains are for the q of joint ids respectively -->
    <gains>
      <kp type="double">1e7 1e7 1e7</kp>
      <kv type="double">5e3 5e3 5e3</kv>
      <ki type="double">0 0 0      </ki>
    </gains>
  </eef-PID-controller-accel>

  <idyn-controller>
    <file type="string">inverse-dynamics/libinverse-dynamics.so</file>
    <priority type="double">4</priority>
    <real-time-factor type="int">1</real-time-factor>
    <dt type="double">0</dt>
    <alpha type="double">1</alpha>
    <last-cfs type="bool">false</last-cfs>
    <last-cfs-filter type="bool">false</last-cfs-filter>
    <des-contact type="bool">true</des-contact>
    <max-contacts-per-foot type="double">0</max-contacts-per-foot>
    <type type="string vector">NOCP</type> <!-- CFQP (BEST: Clawar), CFLCP (EXPERIMENTAL: Anitesciu-Potra), NSQP (EXPERIMENTAL: No-slip CLAWAR), NSLCP (BEST: No-slip LCP) -->
<!--CFQP CFLCP NSQP NSLCP-->
  </idyn-controller>
</XML>
