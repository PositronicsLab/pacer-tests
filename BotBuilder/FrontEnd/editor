#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
import subprocess
import sys
import os
import collections
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from decimal import *
import numpy
f=open("/home/brad/Desktop/pacer-tests/BotBuilder/FrontEnd/debug.txt","w+",0)

#if a slider moves, update the value
def sliderMoved(slider,index):
	params[index]=params[index]._replace(value="{:.3f}".format((float(os.environ[params[index].name])+(float(slider.value())*float(params[index].unit_amount)))))
	names[index].setText(params[index].name+": "+params[index].value)
	names[index].show()


#when hitting next, set all the environment variables to their corresponding stored value
def handleNext(self):
	for i in range(0,NUM_PARAMS):
		os.environ[params[i].name]=str(params[i].value)
	name = os.environ["BUILDER_SCRIPT_PATH"]+"/generate.sh"
	win.hide()
	subprocess.call(name, shell=True)
	sys.exit()

#quit
def handleExit(self):
	sys.exit()

def handleApply(self):
	name = os.environ["BUILDER_SCRIPT_PATH"]+"/generate-pic.sh"

	for i in range(0,NUM_PARAMS):
		os.environ[params[i].name]=str(params[i].value)
	subprocess.call(name, shell=True)
	app.processEvents()
	pixmap = QPixmap(os.environ["BUILDER_GUI_PATH"]+"/model-1.png")
	label.setPixmap(pixmap)
	label.show()







#generating Parameters - this will need to be manually edited to add/remove Parameters
Param = collections.namedtuple('Param', 'name tooltip unit_amount number kinematic value unit')

NUM_PARAMS = 6
global params 
params= list()


params.append(Param(name='lenF2', tooltip='length of second front leg segment', unit_amount=None, value=None, number='1', kinematic='1', unit='length'))
params.append(Param(name='FfootLen', tooltip='length of front foot segment', unit_amount=None, value=None, number='2', kinematic='1', unit='length'))
params.append(Param(name='lenH2', tooltip='length of second back leg segment', unit_amount=None, value=None, number='3', kinematic='1', unit='length'))
params.append(Param(name='HfootLen', tooltip='length of back foot segment', unit_amount=None, value=None, number='4', kinematic='1', unit='length'))
params.append(Param(name='base_size_length', tooltip='length of base', unit_amount=None, value=None, number='5', kinematic='1', unit='length'))
params.append(Param(name='base_size_width', tooltip='width of base', unit_amount=None, value=None, number='6', kinematic='1', unit='length'))
f.write("function limit order: LF_Y_2 LF_Y_3 RF_Y_2 RF_Y_3 LH_Y_2 LH_Y_3 RH_Y_2 RH_Y_3\n\n")
f.write("\n\nParameter order: Upper_front_legs Lower_front_legs Upper_hind_legs Lower_hind_legs Body_length Body_width\n\n")
f.write("\n\ninitial parameters:\n\n")
for i in range(0,NUM_PARAMS):
	f.write(str(float(os.environ[params[i].name])))
	print float(os.environ[params[i].name])
	f.write(' ')
f.write('\n')
f.close()
f=open("/home/brad/Desktop/pacer-tests/BotBuilder/FrontEnd/debug.txt","a+",0)
z=list()

for i in range(0,NUM_PARAMS):
	params[i]=params[i]._replace(value="{:.5f}".format(float(os.environ[params[i].name])))
	if(params[i].unit=='length'):
		params[i]=params[i]._replace(unit_amount=os.environ["unit_len"])
	if(params[i].unit=='radius'):
		params[i]=params[i]._replace(unit_amount=os.environ["unit_rad"])


# Create an PyQT4 application object.
global app 
app= QApplication(sys.argv)
 
# The QWidget widget is the base class of all user interface objects in PyQt4.
global win 
win= QWidget()
 
# Set window size.
win.resize(1400, 700)
 
# Set window title
win.setWindowTitle("Model Improvement")



width = 20
height = 30

neBut= QPushButton('Next', win)
neBut.clicked.connect(handleNext)
neBut.move(1200,650)

exBut= QPushButton('Exit', win)
exBut.clicked.connect(handleExit)
exBut.move(1100,650)

apBut= QPushButton('Apply', win)
apBut.clicked.connect(handleApply)
apBut.move(1060,260)

global names
names = list()
sliders = list()
vel_lim = list()
tor_lim = list()
#two types of limits
limit_names = list()
limit_names.append("vel")
limit_names.append("tor")
#4 types of limb
limb_names= list()
limb_names.append("LF")
limb_names.append("RF")
limb_names.append("LH")
limb_names.append("RH")

joint_names= list()
#joint_names.append("X_1")
joint_names.append("Y_2")
joint_names.append("Y_3")

N_LIMITS = len(limit_names)
N_LIMBS = len(limb_names)
N_JOINTS = len(joint_names)

x=list()
vel_main=list()
tor_main=list()
temp_list=list()
nums=list()
q=numpy.zeros(shape=N_JOINTS*N_LIMBS*N_LIMITS)
curr=0
k=0
#get the jacobian values

for limit in range(0,len(limit_names)):
	w=0	
    	for limb in range(0,len(limb_names)):
        	for joint in range(0,len(joint_names)): 
          		curr=float(os.environ[limb_names[limb]+"_"+joint_names[joint]+"_"+limit_names[limit]])
          		
			if curr < 0:
				nums.append(w)
				hold=str(w)+": "+str(curr)
				temp_list.append(hold)
			w=w+1
			q[k]=curr
			k=k+1
					
      	if limit==0:
	  	vel_main=temp_list
		temp_list=list()
      	else:
	 	tor_main=temp_list





#matrix is number of parameters by joints*limits*limbs
J=numpy.zeros(shape=(N_JOINTS*N_LIMBS*N_LIMITS,NUM_PARAMS)) #= [[0 for r in range(NUM_PARAMS)] for y in range(N_JOINTS*N_LIMBS*N_LIMITS)] 
j=0
count=0
#fill the mtrix with all the limits, and put all of the >0 ones in the variable x that goes into the respective limit variable
#this ensures the user will only see the limits they need to fix, otherwise the values are so large it will leave the window
for i in range(0,NUM_PARAMS):
	j=0
	for limit in range(0,len(limit_names)):
		count=0
    		for limb in range(0,len(limb_names)):
        		for joint in range(0,len(joint_names)): 
          			J[j][i]=float(os.environ[params[i].number + "_"+limb_names[limb]+"_"+joint_names[joint]+"_"+limit_names[limit]])
          			if count in nums:
					hold=str(count)+": "+str(J[j][i])
					x.append(hold)
				count=count+1
				j=j+1
					
      		if(limit==0):
	  		vel_lim.append(x)
			x=list()
      		else:
	 	        tor_lim.append(x)
			x=list()
#take the pseudo-inverse of the original matrix
f.write("\n\nJacobian Matrix:\n\n")
f.write('[')
for i in range(0,N_JOINTS*N_LIMBS*N_LIMITS):
	for j in range(0,NUM_PARAMS):
		f.write(str(J[i][j]))
		f.write(' ')
	f.write(';')
f.write(']')
f.write('\n')
J_inv = numpy.linalg.pinv(J)
f.write("\n\nJacobian matrix pseudo-inverse:\n\n")
f.write('[')
for i in range(0,NUM_PARAMS):
	for j in range(0,N_JOINTS*N_LIMBS*N_LIMITS):
		f.write(str(J_inv[i][j]))
		f.write(' ')
	f.write(';')
f.write(']')
f.write('\n')

tor_lab=list()
vel_lab=list()
#make all the sliders meed
for i in range(0,NUM_PARAMS):
	sliders.append(QSlider(Qt.Horizontal, win))
	sliders[i].setMinimum(-100)
	sliders[i].setMaximum(100)
	sliders[i].setValue(0)
	sliders[i].setTickPosition(QSlider.TicksBelow)
	sliders[i].setTickInterval(1)
#connect each slider to its own, seperate slider moved instance
sliders[0].valueChanged.connect(lambda: sliderMoved(sliders[0],0))
sliders[1].valueChanged.connect(lambda: sliderMoved(sliders[1],1))
sliders[2].valueChanged.connect(lambda: sliderMoved(sliders[2],2))
sliders[3].valueChanged.connect(lambda: sliderMoved(sliders[3],3))
sliders[4].valueChanged.connect(lambda: sliderMoved(sliders[4],4))
sliders[5].valueChanged.connect(lambda: sliderMoved(sliders[5],5))

#place all the limit labels and their values
for i in range(0,NUM_PARAMS):
	height += 40
	names.append(QLabel(params[i].name+": "+params[i].value,win))
	names[i].move(width,height)
	names[i].setStyleSheet('font-size: 10pt; font-family: Courier;')
	sliders[i].move(width,height+5)
	z=" ".join(map(str, vel_lim[i]))
        vel_lab.append(QLabel(z,win))
	vel_lab[i].move(width+180,height+10)
	vel_lab[i].setStyleSheet('font-size: 10pt; font-family: Courier;')
	vel_lab[i].resize(400,30)
	vel_lab[i].setWordWrap(True);
	w=" ".join(map(str, tor_lim[i]))
        tor_lab.append(QLabel(w,win))
	tor_lab[i].move(width+580,height+10)
	tor_lab[i].setStyleSheet('font-size: 10pt; font-family: Courier;')
	tor_lab[i].resize(400,30)
	tor_lab[i].setWordWrap(True);




global label
label = QLabel(win)
pixmap = QPixmap(os.environ["BUILDER_GUI_PATH"]+"/model-1.png")
label.setPixmap(pixmap)
label.move(1000,100)
model = QLabel("Current Model:",win)
model.move(1000,80)



#negate the matrix
f.write("\n\nlimit vector before zeroing positive values\n\n")
f.write(str(q))

q[q>0]=0
f.write("\n\nlimit function vector after zeroing positive values\n\n")

f.write(str(q))
step= numpy.dot(J_inv,q)
numpy.negative(step)
update=list()
f.write("\n\nparameter update vector:\n\n")
for i in range(0,NUM_PARAMS):
	update.append(step.item(i))
	f.write(str(step.item(i)))
	f.write(' ')
f.write("\n\nupdated parameters:\n\n")
#if anything is small enough to update it, then change the slider value to it
for i in range(0,NUM_PARAMS):
		sliders[i].setValue(update[i])
		params[i]=params[i]._replace(value="{:.5f}".format((float(os.environ[params[i].name])+(float(sliders[i].value())*float(params[i].unit_amount)))))
		names[i].setText(params[i].name+": "+params[i].value)
		names[i].show()
                f.write(str(float(params[i].value)))
		f.write(' ')
f.write("\n")

	

vel_text = QLabel("Velocity Limits: ",win)
vel_text.move(40,5)
tor_text = QLabel("Torque Limits: ",win)
tor_text.move(540,5)


#create the main velocity and torque limit labels and display them
z=" ".join(map(str, vel_main))
vel_mLab=QLabel(z,win)
vel_mLab.move(40,20)
vel_mLab.setStyleSheet('font-size: 10pt; font-family: Courier;')
vel_mLab.resize(400,30)
vel_mLab.setWordWrap(True);

w=" ".join(map(str, tor_main))
tor_mLab=QLabel(w,win)
tor_mLab.move(540,20)
tor_mLab.setStyleSheet('font-size: 10pt; font-family: Courier;')
tor_mLab.resize(400,30)
tor_mLab.setWordWrap(True);
f.close()
win.show()
 
sys.exit(app.exec_())
