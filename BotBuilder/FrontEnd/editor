#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
import subprocess
import sys
import os
import collections
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from decimal import *
import numpy


def sliderMoved(slider,index):
	print index
	params[index]=params[index]._replace(value="{:.3f}".format((float(os.environ[params[index].name])+(float(slider.value())*float(params[index].unit_amount)))))
	names[index].setText(params[index].name+": "+params[index].value)
	names[index].show()



def handleNext(self):
	for i in range(0,NUM_PARAMS):
		os.environ[params[i].name]=str(params[i].value)
	name = os.environ["BUILDER_SCRIPT_PATH"]+"/generate.sh"
	win.hide()
	subprocess.call(name, shell=True)
	sys.exit()

def handleExit(self):
	sys.exit()

def handleApply(self):
	name = os.environ["BUILDER_SCRIPT_PATH"]+"/generate-pic.sh"

	for i in range(0,NUM_PARAMS):
		os.environ[params[i].name]=str(params[i].value)
	subprocess.call(name, shell=True)
	app.processEvents()
	pixmap = QPixmap(os.environ["BUILDER_GUI_PATH"]+"/model-1.png")
	label.setPixmap(pixmap)
	label.show()







#generating Parameters - this will need to be manually edited to add/remove Parameters
Param = collections.namedtuple('Param', 'name tooltip unit_amount number kinematic value unit')

NUM_PARAMS = 11
global params 
params= list()

params.append(Param(name='lenF1', tooltip='length of first front leg segment', unit_amount=None, value=None, number='1', kinematic='1', unit='length'))
params.append(Param(name='lenF2', tooltip='length of second front leg segment', unit_amount=None, value=None, number='2', kinematic='1', unit='length'))
params.append(Param(name='FfootLen', tooltip='length of front foot segment', unit_amount=None, value=None, number='3', kinematic='1', unit='length'))
params.append(Param(name='lenH1', tooltip='length of first back leg segment', unit_amount=None, value=None, number='4', kinematic='1', unit='length'))
params.append(Param(name='lenH2', tooltip='length of second back leg segment', unit_amount=None, value=None, number='5', kinematic='1', unit='length'))
params.append(Param(name='HfootLen', tooltip='length of back foot segment', unit_amount=None, value=None, number='6', kinematic='1', unit='length'))
params.append(Param(name='base_size_length', tooltip='length of base', unit_amount=None, value=None, number='7', kinematic='1', unit='length'))
params.append(Param(name='base_size_width', tooltip='width of base', unit_amount=None, value=None, number='8', kinematic='1', unit='length'))
params.append(Param(name='base_size_height', tooltip='height of base', unit_amount=None, value=None, number='9', kinematic='1', unit='length'))
params.append(Param(name='FfootRad', tooltip='length of back foot segment', unit_amount=None, value=None, number='10', kinematic='0', unit='radius'))
params.append(Param(name='HfootRad', tooltip='length of back foot segment', unit_amount=None, value=None, number='11', kinematic='0', unit='radius'))

for i in range(0,NUM_PARAMS):
	params[i]=params[i]._replace(value="{:.3f}".format(float(os.environ[params[i].name])))
	if(params[i].unit=='length'):
		params[i]=params[i]._replace(unit_amount=os.environ["unit_len"])
	if(params[i].unit=='radius'):
		params[i]=params[i]._replace(unit_amount=os.environ["unit_rad"])
 
# Create an PyQT4 application object.
global app 
app= QApplication(sys.argv)
 
# The QWidget widget is the base class of all user interface objects in PyQt4.
global win 
win= QWidget()
 
# Set window size.
win.resize(1400, 700)
 
# Set window title
win.setWindowTitle("Model Improvement")



width = 20
height = 30

neBut= QPushButton('Next', win)
neBut.clicked.connect(handleNext)
neBut.move(1200,650)

exBut= QPushButton('Exit', win)
exBut.clicked.connect(handleExit)
exBut.move(1100,650)

apBut= QPushButton('Apply', win)
apBut.clicked.connect(handleApply)
apBut.move(1060,260)

global names
names = list()
sliders = list()
vel_lim = list()
tor_lim = list()

limit_names = list()
limit_names.append("vel")
limit_names.append("tor")

limb_names= list()
limb_names.append("LF")
limb_names.append("RF")
limb_names.append("LH")
limb_names.append("RH")

joint_names= list()
#joint_names.append("X_1")
joint_names.append("Y_2")
joint_names.append("Y_3")

N_LIMITS = len(limit_names)
N_LIMBS = len(limb_names)
N_JOINTS = len(joint_names)

x=list()
J=Matrix = [[0 for r in range(NUM_PARAMS)] for y in range(N_JOINTS*N_LIMBS*N_LIMITS)] 
j=0
count=0
for i in range(0,NUM_PARAMS):
	j=0
	for limit in range(0,len(limit_names)):
		count=0
    		for limb in range(0,len(limb_names)):
        		for joint in range(0,len(joint_names)): 
          			J[j][i]=float(os.environ[params[i].number + "_"+limb_names[limb]+"_"+joint_names[joint]+"_"+limit_names[limit]])
          			if J[j][i]>0:
					hold=str(count)+": "+str(J[j][i])
					x.append(hold)
					count=count+1
			j=j+1
					
      		if(limit==0):
	  		vel_lim.append(x)
			x=list()
      		else:
	 	        tor_lim.append(x)
			x=list()
J_inv = numpy.linalg.pinv(numpy.matrix(J))
      
tor_lab=list()
vel_lab=list()

for i in range(0,NUM_PARAMS):
	sliders.append(QSlider(Qt.Horizontal, win))
	sliders[i].setMinimum(-100)
	sliders[i].setMaximum(100)
	sliders[i].setValue(0)
	sliders[i].setTickPosition(QSlider.TicksBelow)
	sliders[i].setTickInterval(1)
sliders[0].valueChanged.connect(lambda: sliderMoved(sliders[0],0))
sliders[1].valueChanged.connect(lambda: sliderMoved(sliders[1],1))
sliders[2].valueChanged.connect(lambda: sliderMoved(sliders[2],2))
sliders[3].valueChanged.connect(lambda: sliderMoved(sliders[3],3))
sliders[4].valueChanged.connect(lambda: sliderMoved(sliders[4],4))
sliders[5].valueChanged.connect(lambda: sliderMoved(sliders[5],5))
sliders[6].valueChanged.connect(lambda: sliderMoved(sliders[6],6))
sliders[7].valueChanged.connect(lambda: sliderMoved(sliders[7],7))
sliders[8].valueChanged.connect(lambda: sliderMoved(sliders[8],8))
sliders[9].valueChanged.connect(lambda: sliderMoved(sliders[9],9))
sliders[10].valueChanged.connect(lambda: sliderMoved(sliders[10],10))

for i in range(0,NUM_PARAMS):
	height += 40
	names.append(QLabel(params[i].name+": "+params[i].value,win))
	names[i].move(width,height)
	names[i].setStyleSheet('font-size: 10pt; font-family: Courier;')
	sliders[i].move(width,height+5)
	z=" ".join(map(str, vel_lim[i]))
        vel_lab.append(QLabel(z,win))
	vel_lab[i].move(width+180,height+10)
	vel_lab[i].setStyleSheet('font-size: 10pt; font-family: Courier;')
	vel_lab[i].resize(400,30)
	vel_lab[i].setWordWrap(True);
	w=" ".join(map(str, tor_lim[i]))
        tor_lab.append(QLabel(w,win))
	tor_lab[i].move(width+580,height+10)
	tor_lab[i].setStyleSheet('font-size: 10pt; font-family: Courier;')
	tor_lab[i].resize(400,30)
	tor_lab[i].setWordWrap(True);




global label
label = QLabel(win)
pixmap = QPixmap(os.environ["BUILDER_GUI_PATH"]+"/model-1.png")
label.setPixmap(pixmap)
label.move(1000,100)
model = QLabel("Current Model:",win)
model.move(1000,80)

vel_main=list()
tor_main=list()
temp_list=list()
q=list()
curr=0
k=0
for limit in range(0,len(limit_names)):
    	for limb in range(0,len(limb_names)):
        	for joint in range(0,len(joint_names)): 
          		curr=float(os.environ[params[i].number + "_"+limb_names[limb]+"_"+joint_names[joint]+"_"+limit_names[limit]])
          		if curr < 0:
				hold=str(k)+": "+str(curr)
				temp_list.append(hold)
			q.append(curr)
			k=k+1
					
      	if limit==0:
	  	vel_main=temp_list
		temp_list=list()
      	else:
	 	tor_main=temp_list


J_inv=numpy.negative(J_inv)
step= numpy.dot(J_inv,q)
update=list()
for i in range(0,NUM_PARAMS):
	update.append(step.item(0,i)*(float(params[i].unit_amount)))

for i in range(0,NUM_PARAMS):
	print "update: "+str(update[i])
	if(update[i] <100 and update[i]>=-100):
		sliders[i].setValue(update[i])
		print "update: "+str(update[i])
		params[i]=params[i]._replace(value="{:.3f}".format((float(os.environ[params[i].name])+(float(sliders[i].value())*float(params[i].unit_amount)))))
		names[i].setText(params[i].name+": "+params[i].value)
		names[i].show()

vel_text = QLabel("Velocity Limits: ",win)
vel_text.move(40,5)
tor_text = QLabel("Torque Limits: ",win)
tor_text.move(540,5)



z=" ".join(map(str, vel_main))
vel_mLab=QLabel(z,win)
vel_mLab.move(40,20)
vel_mLab.setStyleSheet('font-size: 10pt; font-family: Courier;')
vel_mLab.resize(400,30)
vel_mLab.setWordWrap(True);

w=" ".join(map(str, tor_main))
tor_mLab=QLabel(w,win)
tor_mLab.move(540,20)
tor_mLab.setStyleSheet('font-size: 10pt; font-family: Courier;')
tor_mLab.resize(400,30)
tor_mLab.setWordWrap(True);




win.show()
 
sys.exit(app.exec_())
